Struttura progetto:
1) Struttura globale di ogni oggetto e implementazione di ogni schermata
- Assicurarsi che si chiuda alla funzione close() 
- Abbinare ogni oggetto ad un numero da poi inserire in ogni tile dell'array (vedi 2.Functions)) con una funzione e switch statements
- Abbinare, con una funzione e switch statements, ogni numero ad un oggetto da poi usare nelle funzioni

1.Object)
- costruire una class con nested (enum class Type (dove si raggruppano tutti i nomi dei possibili oggetti e l'oggetto vuoto) )
- Movimento: Check stop/push, check movable, move into (se è muro o fine mappa
- Ci sono due enum class alla base di una terza calsse finale. Alla base c'è l'oggetto Baba e l'aggettivo You, alla classe finale (Avatar o Player) ci sarà, nella parte privata, l'oggetto 
Player, inizializzato con l'oggetto Baba e l'aggettivo You.
- Nel main loop controllare gli eventi legati al Player (ossia chi ha l'aggettivo You), e le interazioni.


2)

2.Functions)
- funzione clear(): per resettare la schermata
- funzione draw(): per, una volta sistemato tutti gli oggetti e le relative posizioni, disegnare su un hidden buffer
- funzione display() (mandatory dopo draw()): it takes what was drawn() since the last call to display and displays it on the window (from the hidden buffer)
- 

2. Struttura dei file)
- Creare per ogni livello due file (un header (per le dichiarazioni della posizione) e un sorgente (definizioni del tipo di ogni oggetto)) 
- Ogni livello: update della schermata (dal file sorgente)
  Creare una grid e riempirla di oggetti 
  Assicurarsi della correttezza delle frasi logiche
- quando si registra un input, registrare tutti i cambiamenti logici e agire su di essi
Al raggiungimento delle condizioni dell'evento win, distruggi il livello e rimpiazzalo con una schermata con "Hai vinto!" e tempo usato. Mettere un tasto per chiudere il programma o continuare (se altri livelli)
Al raggiungimento delle condizioni dell'evento lose, distruggi il livello e rimpiazzalo con una schermata con "Hai perso!" e tempo usato. Mettere un tasto per chiudere il programma o ricominciare

3. Livelli - idee
3.1. Power-ups
  - Teorema di pitagora: puoi spostarti in diagonale premendo "wd" insieme
  - costante g: leggera/pesante, cambia l'effetto della gravità
  - macchina termica: fornisci calore agli oggetti circostanti
  1) ingrenaggio che se attivato con oggetto leva, apre una porta. Per arrivare a leva, ottieni power-up per superare ostacoli 
  2) 


Implementaione:
Regole grammaticali: (per la formattazione: decidiamo alla fine)
Funzioni: 
- nome: iniziale minuscola; prossima parola Maiuscola; NO '_' (e.g. getPlayerPosition(...) {...})
Variabili:
- membri privati: 'm_'...
- globali (DENTRO UN NAMESPACE APPOSITO): 'g_'...
- static: 's_'...
- per indici: 'iii', 'jjj', 'kkk', 'count',
- per iteratori: 'eee' (abbreviazione per "element")
- locali: iniziale minuscola; prossima parola minuscola; SI '_'
Classi o Struct
- 'c_' (o 's_' se struct); Iniziale Maiuscola; prossima parola Maiuscola, NO '_'
(l'enum: "Type")



Alcune regole del gioco: N.B.: non devono tirare eccezioni, semplicemente non fanno nulla
Azioni permesse dalle frasi logiche:
- una frase deve essere una retta (NO prima orizzontale, poi verticale), ma una parola può essere condivisa da più frasi (SI due frasi a croce)
- ??? una frase può contenere SOLO un noun (baba is wall) ???
- se l'azione nel Main Loop è muovere un blocco(che costruisce una frase logica): riassegnare 

Main Loop: ad ogni iterazione:
- getKeyPressed();
- verifica lo stato del gioco (ha vinto, ha perso, deve andare avanti coi livelli(vedi più avanti),...) e eventuali azioni
- WASD = movimento, SPACE = lancio, Alt+f4 = chiusura...
- verifica se quell'azione è accettabile (targetIsMovable ?)
- controllare certe cose: se si è mosso un Block, ricontrollare le regole; You è collegato a qualcosa?;


- (andare avanti coi livelli): ciclo in modo da confrontare, tra due livelli consecutivi, cosa cambia e rimpiazzare le celle diverse

Grafica:
- è possibile fare il livello come array di array di size fissa? 
  Movimento più facile da implementare(getPlayerPosition(), WASD = dx o dy, )


Oggetti:
Blocchi con sopra parole: struct a parte con membri: std::vector<Type> e ICON_TYPE (per poi stamparle a schermo).




• First pass
• Find potential first words of sentences and check how long potential sentences they'd form
• For simplicity & design reasons: only left-to-right and top-to-bottom is accepted & rules
must be in straight lines
• Since the shortest possible rule is 3 words, any 1- or 2-word lines can be discarded right away

• Second pass
• Go through the potential sentences and see if their word types are in an order that's seemingly
valid
• (e.g. "Baba Is You Rock" → "You Rock" doesn't parse, disregard "Rock")
• If a word is discarded, it's checked again later to see if it could form a valid sentence otherwise
• (e.g. "Baba Is You Rock Is Push" → "You Rock" doesn't parse, but "Rock Is Push" does)
• Later, more complex word types make this pass extremely complicated
• Third pass
• Go through the sentences left and see if the syntax makes sense; if not, discard
• (e.g. "Flag Has Win" follows the correct word order (Object-Verb-Quality), but
"Has" doesn't accept "Win" as a following word in the sentence ("Flag Has Baba"*
would be valid))
• If the syntax works, transform the sentence to a format the game logic can understand
and add it to various rule lists (e.g. a global list, an object-specific list, etc.)